o: ActiveSupport::Cache::Entry:@valueI"­	package org.camel.netty;

import org.apache.camel.*;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.profile.GCProfiler;
import org.openjdk.jmh.profile.StackProfiler;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.options.OptionsBuilder;
import org.openjdk.jmh.runner.options.TimeValue;

import java.util.concurrent.TimeUnit;

/**
 * Created by dsemenov
 * Date: 10/23/15.
 */
@State(Scope.Thread)
@OutputTimeUnit(TimeUnit.SECONDS)
public class CamelNettyProducerMicroBenchmark {
  public static void main(String[] args) throws Exception {
    new Runner(new OptionsBuilder()
            .include(CamelNettyProducerMicroBenchmark.class.getName() + ".*")
            .forks(2)
            .warmupTime(TimeValue.seconds(5))
            .warmupIterations(3)
            .measurementTime(TimeValue.seconds(5))
            .measurementIterations(10)
            .addProfiler(GCProfiler.class)    // report GC time
            .addProfiler(StackProfiler.class) // report method stack execution profile
            .build()).run();
  }

  @State(Scope.Thread)
  public static class SleepyState {
    public CamelContext context;
    public ProducerTemplate producerTemplate;
    public ConsumerTemplate consumerTemplate;

    @Setup
    public void setup() throws Exception {
      CamelContext camelContext = new DefaultCamelContext();

      camelContext.start();
      producerTemplate = camelContext.createProducerTemplate();
      consumerTemplate = camelContext.createConsumerTemplate();
      camelContext
              .addRoutes(
                      new RouteBuilder() {
                        @Override
                        public void configure() throws Exception {
                          from("direct:start")
                                  .to("netty:tcp://localhost:5051?textline=true&sync=false");

                          from("netty:tcp://localhost:5051?textline=true&sync=false")
                                  //.delay(100)
                                  .validate(body().isInstanceOf(String.class));
                        }
                      }
              );

      context = camelContext;
    }
  }

  @Benchmark
  public void measure_netty_throughput(SleepyState s) {
    s.producerTemplate.sendBody("direct:start", "Hello Daemon");
    //Object o = s.consumerTemplate.receiveBody("direct:result");
  }

}:ET:@created_atf1449524227.174472:@expires_in0